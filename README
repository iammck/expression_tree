The goal of this project is to aid in learning design pattern concepts using an expression tree processor as the example program.

After selecting input format, the program receives an input expression from the user. It then interprets the expression and forms a binary tree structure. The user can then run several commands upon the structure to print and evaluate the expression. The program has two modes of opperation. The first mode, succinct mode, evaluates a given expression using default parameters. The second, verbose, allows the user to control how the expression is to be evaluated (ie infix, prefix, postfix) or printed (ie infix, inorder, prefix, preorder, etc) and can continue to run until the user quits the application.

This project uses a video series presented by Douglas Schmidt available on YouTube as a basis for concept, design, and work flow. Schmidt uses the example to cover several design patterns from the book 'Design Patterns: Elements of Reusable Object-Oriented Software', (Gang of Four) to produce an expression tree processor.

I shall attempt to follow this series using it as a guide for writing code leaning heavily on common design patterns. I have not yet seen Schmidt's coded solution to the test case and most of the code samples available through out the videos are written in c++. I shall attempt to write the application using java. Since java uses a garbage collection mechanism for memory management, Schmidt suggests that Bridge pattern may be omitted. To achieve my goals for this exercise, I shall attempt to implement the Bridge pattern along with all the other patterns described in my version of the test case.

I am using a file, argfile to aid the compiling process using the command
	javac @argfile or javac `@argfile in power shell.

Running the next line from ExpressionTree directory in PowerShell will run the tests.
	remove-item bin\*.class; javac `@argfile `@testargfile; java -cp lib\*`;bin MyTestRunner

There is also a PowerShell script, BuildAndTest.ps1 which can be used to build and test the project.

-Tree Structure and Access
Each data element in the tree structure is a node, either a branch node or a leaf node. Leaf nodes appear as numbers or parenthesis, while branch nodes are as processes to be performed on its child nodes. A branch node may have one child (ie a unary opperation like negation) or it may have two child nodes. The child nodes of a branch node may be either branch nodes or leaf nodes.

       *
      / \
    /     \
   -       +
     \    / \
      5  3   4

Because of the similarities in the different elements of data and since each data element should be accessible in a uniform way, a Composite pattern is to be used to implement the data model for the application. The Composite pattern consists of the Component, Composite and leaf node elements. The Component is the base class which both composite and leaf nodes extend. A leaf has no children extending component, where as the composite does have child objects extending the component. 
A composite component is termed a node, the nodes representing processes are composite (having one ore two child nodes) and the nodes representing numbers and parenthesis are the leaves.  Each node has an item (ie a number, plus, minus, etc), a left and right child node, as well as an accept() method to be used to interact with the node via the visitor pattern.
The implementation of the various elements are distinct, yet should be accessed in a uniform way. The Bridge pattern shall be use to sepparate the abstraction from the implementation. In this way interaction with each node can be accessed in a uniform way.
In addition to the objects found in the Expression Tree, I have also made left and right parenthesis sub-classes of the LeafNode class. To achieve this, i have also created a NumberLeafNode class which extends LeafNode. Parenthesis are not stored in the expression tree and may not be needed to compute the tree, but to print the tree using an in-order traversal (such as to recreate an infix expression) the precedence between symbols must be (re)applies. To this end the InFixIterator class utilizes the symbols as possible return values. 

-Interpreter
The expression tree is created using the interpreter and builder patterns. The interpreter patter is used to interpreted a string input into interpretable parts. The root of the interpretable parts then builds and expression tree with itself as the root node, then an ExpressionTree object is instantiated with the resulting expression tree. The interpreter input string value can be an infix, prefix or and postfix expression? The interpreter class should be able to use the same Interpretable implementations for each input grammer. 

-Evaluation
The expression tree is evaluated using an Evaluator subclass and follows the interpreter pattern. The evaluator uses the context to build the right expression tree iterator(). The subclasses of Evaluator then evaluate the Expression tree with the iterator. If the context's currentTreeTraversalOrder is not evaluatable, an InvalidStateException is thrown. Otherwise a Double should be returned.

-Symbols
Instead of having two seperate structures for evaluation and interpretation. The Symbol base class implements both Interpretable and Evaluatable interfaces. each symbol is capable of interpreting or evaluating itself as well as determining its precedenceComparedTo other symbols.

-Iteration
Users of the expression tree should be able to iterate through it in various ways; inorder, preorder, postorder, reverse, level, infix, prefix, postfix.
ExpressionTree implements Iterable interface. An appropriate iterator, depending on the ExpressionTreeContext.currentTreeTraversalOrder is instantiated and returned for iteration.

-Visitor pattern
The visitor pattern is used by the ExpressionBuilder to build an expression string. During creation while iterating through the tree, each Component node's accept() method is called. Each node then calls back the builder.

-Command pattern
Commands are created using The abstract factory pattern. The factor creates the appropriate command as a result of the commands string value, ie 'reset', 'evaluate', etc. The command is created and can be executed. Execution calls an approriate ExpressionTreeContext method to do the actual work.

-State pattern
The state pattern is used to control program flow and to ensure commands happen in a particular order. There are a few State sub classes: InitialState, FormatedState, HasExpressionState and HasUnevaluatableExpressionState.

-Reactor pattern
The program should use the Reactor pattern along with the template pattern to abstract the internals of the program away from the system the application is a part of. In this way I should be able to create separate applications for different systems (consol, swing, android, etc) that use the same internal structure.

-Testing
Test code is located at src\test\java. Testing is done using JUnit. The
jar for JUnit is in the lib folder. Another jar is necessary, hamcrest-core-1.3.jar. Testing from powershell may include several step.

MyTestRunner.java is responsible for running individual test classes found in the sub directories. Each test class tests a section of the program for which it is written. I have tried to develop the main program with respect to the tests that define it and have been writing the tests first, generally trying to keep a test driven development cycle active.





